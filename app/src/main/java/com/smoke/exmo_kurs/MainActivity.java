package com.smoke.exmo_kurs;import android.content.Intent;import android.graphics.Typeface;import android.os.Bundle;import android.support.design.widget.FloatingActionButton;import android.support.v7.app.AppCompatActivity;import android.util.TypedValue;import android.view.Gravity;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.support.v7.widget.Toolbar;import java.io.File;import java.io.FileWriter;import java.io.FileReader;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.net.UnknownHostException;import java.util.concurrent.ExecutionException;import javax.net.ssl.HttpsURLConnection;import android.os.AsyncTask;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    private String tickers_array[] = new String[3000];    private String[] pair_array;    private Boolean no_connect = false;    private Boolean error_on_server = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        FloatingActionButton button_upd = (FloatingActionButton) findViewById(R.id.button_upd);        button_upd.setOnClickListener(onClickListener);        Toolbar toolbar1 = (Toolbar) findViewById(R.id.toolbar1);        setSupportActionBar(toolbar1);        //первичное создание файла (во внутренней памяти) настроек с дефолтовыми валютными парами для отображения        File settings_file = new File(this.getFilesDir(),"exmo_kurs_settings.txt");        try {            if (!settings_file.exists()) { //если файла настроек по данному пути нет, то                settings_file.createNewFile(); // создаем файл                FileWriter settings_file_writer = new FileWriter(settings_file,false);                String text = "BTC_USD;BTC_RUB;ETH_USD;ETH_RUB;"; // дефолтные валютные пары                settings_file_writer.write(text); // записываем в файл                settings_file_writer.flush();            }        } catch (IOException ex) {            System.out.println(ex.getMessage());        }    }//обновление валют после возврата на главную активити ______________________________________________   protected void onResume () {        super.onResume();        mfile_reader();        Fon_potok fon_potok = new Fon_potok();        try {            fon_potok.execute("https://api.exmo.me/v1/ticker/").get();        } catch (InterruptedException ex) {            System.out.println(ex.getMessage());        } catch (ExecutionException ex) {            System.out.println(ex.getMessage());        }       if (no_connect) {           Toast toast = Toast.makeText(MainActivity.this, "Отсутствует доступ в Интернет!", Toast.LENGTH_SHORT);           toast.show();       }       else {mshow_kurs_inf(pair_array, tickers_array);}    }//обработчик нажатия на кнопки _____________________________________________________________________    private final View.OnClickListener onClickListener = new View.OnClickListener() {        @Override        public void onClick(View v) {            switch (v.getId()) {                case R.id.button_upd: { //нажатие на кнопку обновить                    mfile_reader(); // читаем файл settings                    Fon_potok fon_potok = new Fon_potok();                    try {                        fon_potok.execute("https://api.exmo.me/v1/ticker/").get();                    } catch (InterruptedException ex) {                        System.out.println(ex.getMessage());                    } catch (ExecutionException ex) {                        System.out.println(ex.getMessage());                    }                    if (no_connect) {                        Toast toast = Toast.makeText(MainActivity.this, "Отсутствует доступ в Интернет!", Toast.LENGTH_SHORT);                        toast.show();                    }                    else {mshow_kurs_inf(pair_array, tickers_array);}                    break;                }            }        }    };// чтение файла settings ___________________________________________________________________________    private void mfile_reader () {       File settings_file = new File(this.getFilesDir(),"exmo_kurs_settings.txt");       try       {           pair_array = new String[100];           char[] settings_char = new char[500];           FileReader settings_file_reader = new FileReader(settings_file);           while((settings_file_reader.read(settings_char)) != -1) {}           pair_array = String.valueOf(settings_char).split(";|\u0000"); // разбиваем строку типа BTC_USD;BTC_RUB на массив {BTC_USD, BTC_RUB}       }       catch(IOException ex) {           System.out.println(ex.getMessage());       }   }//отбор детальной информации по выбранным пользователем валютным парам______________________________   private void mshow_kurs_inf (String[] p_array, String[] t_array) {       LinearLayout l_layout1 = (LinearLayout) findViewById(R.id.linearlayout1);       l_layout1.removeAllViews();       if (error_on_server) { // если на сервере ошибка, то  выводим изображение и сообщение           ImageView error_image = new ImageView(this);           error_image.setImageResource(R.drawable.error_on_server);           l_layout1.addView(error_image);           TextView error_text = new TextView(this);           error_text.setText("Сервер в данный момент на обслуживании. Извините за доставленные неудобства!");           error_text.setTextSize(TypedValue.COMPLEX_UNIT_PT, 15);           Typeface boldTypeface = Typeface.defaultFromStyle(Typeface.BOLD);           error_text.setTypeface(boldTypeface);           error_text.setGravity(Gravity.CENTER_HORIZONTAL);           l_layout1.setShowDividers(0);           l_layout1.addView(error_text);       }       else { // если ошибки нет, то формируем данные по валютным парам (buy_price, sell_price и т.п.)           String vyvod;           if ((p_array.length != 0) && (t_array.length != 0)) {               for (int i = 0; i < p_array.length; i++) {                   for (int k = 0; k < t_array.length; k += 19) {                       if (t_array[k].equals(p_array[i])) {                           TextView text_view_N = new TextView(this); //создаем textview динамически                           vyvod = t_array[k] + "\n" + t_array[k + 1] + " = " + t_array[k + 2] + "\n" +                                   t_array[k + 3] + " = " + t_array[k + 4];                           text_view_N.setText(vyvod);                           l_layout1.addView(text_view_N); //добавляем textview в layout                           break;                       }                   }               }           }       }    }//фоновый поток для выгрузки с сайта ЕХМО информации по валютным парам и ее обработка_______________    class Fon_potok extends AsyncTask<String,Void,String[]> {        @Override        protected String[] doInBackground(String... params) {            //String urlParameters = null;            URL url = null;            HttpURLConnection connection = null;            String r = "";            try {                //Create connection                url = new URL(params[0]);                connection = (HttpsURLConnection) url.openConnection();                connection.setRequestMethod("GET");                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");                connection.setRequestProperty("Content-Language", "en-US");                connection.setUseCaches(false);                connection.setDoOutput(true);                //Get Response                InputStream is = null;                is = connection.getInputStream();                BufferedReader rd = new BufferedReader(new InputStreamReader(is));                StringBuffer response = new StringBuffer(); // or StringBuffer if Java version 5+                String line;                while ((line = rd.readLine())!= null)                {                    response.append(line);                }                rd.close();                response.delete(0,2); // удаляем {" с начала строки, для успешного выполнения split ниже                r = response.toString();                // если от сервера пришел ответ об ошибке, то выставляем флаг ошибки                error_on_server = r.indexOf("error") > 0;                no_connect = false;            }            catch (UnknownHostException e) {                no_connect = true;  // если связи с сервером нет, то уведомляем об отсутствии связи            }            catch (Exception  e) {            }            finally {                if(connection != null) {connection.disconnect();}            }            tickers_array  = r.split("\u0000|(\\{\")|(\":\\{\")|(\":\")|(\",\")|(\\},\")|(\":)|(\\}\\})"); //убираем из выгрузки лишние знаки            return tickers_array;        }        @Override        protected void onPostExecute(final String[] result) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    tickers_array = result;                }            });        }    }// отображаем меню на тулбаре ______________________________________________________________________    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu, menu);        return true;    }// обрабатываем выбор item в меню __________________________________________________________________    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.item_settings: {                // фоновая выгрузка tickers, ждем выгрузки и идем дальше                Fon_potok fon_potok = new Fon_potok();                try {                    fon_potok.execute("https://api.exmo.me/v1/ticker/").get();                } catch (InterruptedException ex) {                    System.out.println(ex.getMessage());                } catch (ExecutionException ex) {                    System.out.println(ex.getMessage());                }                if (no_connect) {                    Toast toast = Toast.makeText(MainActivity.this, "Отсутствует доступ в Интернет!", Toast.LENGTH_SHORT);                    toast.show();                }                else if (error_on_server) {// ничего не делаем ;                }                else {                    Intent intent = new Intent(MainActivity.this, SettingsActivity.class);                    intent.putExtra("tickers_array", tickers_array);                    startActivity(intent);                }                break;            }        }        return true;    }}